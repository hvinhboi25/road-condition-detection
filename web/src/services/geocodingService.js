// S·ª≠ d·ª•ng fetch API thay v√¨ axios ƒë·ªÉ tr√°nh dependency

// Google Maps Geocoding API service
class GeocodingService {
  constructor() {
    // S·ª≠ d·ª•ng environment variable ho·∫∑c fallback
    this.apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || 'YOUR_GOOGLE_MAPS_API_KEY';
    this.baseUrl = 'https://maps.googleapis.com/maps/api/geocode/json';
    this.cache = new Map(); // Cache ƒë·ªÉ tr√°nh g·ªçi API nhi·ªÅu l·∫ßn cho c√πng m·ªôt t·ªça ƒë·ªô
    
    // Ki·ªÉm tra API key
    if (this.apiKey === 'YOUR_GOOGLE_MAPS_API_KEY') {
      console.warn('‚ö†Ô∏è Google Maps API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng xem h∆∞·ªõng d·∫´n trong GOOGLE_MAPS_SETUP.md');
    }
  }

  // Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô (lat, lng) th√†nh ƒë·ªãa ch·ªâ
  async reverseGeocode(lat, lng) {
    if (!lat || !lng) {
      return 'T·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá';
    }

    // T·∫°o key cho cache
    const cacheKey = `${lat.toFixed(6)},${lng.toFixed(6)}`;
    
    // Ki·ªÉm tra cache tr∆∞·ªõc
    if (this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    // Ki·ªÉm tra n·∫øu API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh
    if (this.apiKey === 'YOUR_GOOGLE_MAPS_API_KEY') {
      console.log('üìç S·ª≠ d·ª•ng t·ªça ƒë·ªô thay v√¨ ƒë·ªãa ch·ªâ (API key ch∆∞a c·∫•u h√¨nh)');
      const fallbackAddress = `V·ªã tr√≠: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;
      this.cache.set(cacheKey, fallbackAddress);
      return fallbackAddress;
    }

    try {
      // S·ª≠ d·ª•ng fetch API thay v√¨ axios
      const params = new URLSearchParams({
        latlng: `${lat},${lng}`,
        key: this.apiKey,
        language: 'vi', // Ng√¥n ng·ªØ ti·∫øng Vi·ªát
        region: 'VN' // Khu v·ª±c Vi·ªát Nam
      });
      
      const response = await fetch(`${this.baseUrl}?${params}`);
      const data = await response.json();

      if (data.status === 'OK' && data.results.length > 0) {
        const result = data.results[0];
        const address = this.formatAddress(result);
        
        // L∆∞u v√†o cache
        this.cache.set(cacheKey, address);
        
        return address;
      } else {
        const fallbackAddress = `V·ªã tr√≠: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;
        this.cache.set(cacheKey, fallbackAddress);
        return fallbackAddress;
      }
    } catch (error) {
      console.error('L·ªói khi g·ªçi Google Geocoding API:', error);
      const fallbackAddress = `V·ªã tr√≠: ${lat.toFixed(4)}, ${lng.toFixed(4)}`;
      this.cache.set(cacheKey, fallbackAddress);
      return fallbackAddress;
    }
  }

  // Format ƒë·ªãa ch·ªâ t·ª´ k·∫øt qu·∫£ Google API
  formatAddress(result) {
    const components = result.address_components;
    let address = result.formatted_address;

    // T√¨m t√™n ƒë∆∞·ªùng ch√≠nh
    const route = components.find(comp => comp.types.includes('route'));
    const streetNumber = components.find(comp => comp.types.includes('street_number'));
    const ward = components.find(comp => comp.types.includes('sublocality_level_1'));
    const district = components.find(comp => comp.types.includes('administrative_area_level_2'));
    const city = components.find(comp => comp.types.includes('administrative_area_level_1'));

    // T·∫°o ƒë·ªãa ch·ªâ ng·∫Øn g·ªçn h∆°n
    let shortAddress = '';
    
    if (streetNumber && route) {
      shortAddress = `${streetNumber.long_name} ${route.long_name}`;
    } else if (route) {
      shortAddress = route.long_name;
    }

    if (ward) {
      shortAddress += `, ${ward.long_name}`;
    }
    
    if (district) {
      shortAddress += `, ${district.long_name}`;
    }
    
    if (city) {
      shortAddress += `, ${city.long_name}`;
    }

    return shortAddress || address;
  }

  // Batch reverse geocoding cho nhi·ªÅu t·ªça ƒë·ªô
  async batchReverseGeocode(coordinates) {
    const promises = coordinates.map(({ lat, lng }) => 
      this.reverseGeocode(lat, lng)
    );
    
    return Promise.all(promises);
  }

  // X√≥a cache
  clearCache() {
    this.cache.clear();
  }

  // L·∫•y s·ªë l∆∞·ª£ng items trong cache
  getCacheSize() {
    return this.cache.size;
  }
}

// Export singleton instance
export default new GeocodingService();
